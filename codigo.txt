<!DOCTYPE html>
<html lang="es" data-bs-theme="dark">

<head>
  <meta charset="UTF-8">
  <title>ArduWS Constructor</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/all.min.css">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Añade highlight.js -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/darcula.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

  <!-- Pickr CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css" />
  <!-- Pickr JS -->
  <script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>


</head>

<body>
  <nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">ArduWS</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup"
        aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav">
          <a class="nav-link" id="constructor-guiado" aria-current="page" href="#">Constructor guiado</a>
          <a class="nav-link" id="constructor-manual" aria-current="page" href="#">Constructor Manual</a>

        </div>
      </div>
    </div>
  </nav>
  <!-- Añade una div para mostrar el JSON -->
  <div id="jsonContainer" class="container border rounded p-3 my-3" style="overflow-x: auto; display: none;">
    <pre><code id="jsonCode" class="json">Mi codigo json</code></pre>
    <!-- Añade un botón para copiar el JSON -->
    <button onclick="portapapelesJson();" class="btn btn-primary">Copiar JSON</button>
  </div>

  <div id="principal" class="container border rounded p-3 my-3">
    <div class="p-3 my-3">
      <h1 class="text-primary">Bienvenido a ArduWS Constructor.</h1>
      <p>ArduWS Constructor es una aplicación intuitiva que te permite generar fácilmente código Arduino para la
        comunicación WebSocket. Desde la creación de variables hasta la serialización y deserialización JSON, ArduWS
        Constructor simplifica el proceso de programación para microcontroladores Arduino. Con una interfaz amigable y
        paso a paso, puedes crear rápidamente el código necesario para tus proyectos, todo en una sola plataforma.</p>
    </div>
    <pre>
      <code id="arduinoCode" class="cpp">
        // "Ejemplo del codigo de creado con el formulario datos"



        // Variables

        String apName = "miAP";
        String apPassword = "12345678";
        String hostname = "ArduWS ";
        String localIp = "192.168.1.10";
        String gateway = "192.168.1.1";
        String subnet = "255.255.255.0";
        String dns1 = "8.8.8.8";
        String dns2 = "8.8.4.4";
        int LED_PIN = 13; // tipoEntrada INPUT
        bool power = true; // tipoEntrada none
        String password = "12345678"; // tipoEntrada none
        
        // Deserialización del JSON completo
        apName = doc["step1"]["apName"];
        apPassword = doc["step1"]["apPassword"];
        hostname = doc["step1"]["hostname"];
        localIp = doc["step1"]["localIp"];
        gateway = doc["step1"]["gateway"];
        subnet = doc["step1"]["subnet"];
        dns1 = doc["step1"]["dns1"];
        dns2 = doc["step1"]["dns2"];
        LED_PIN = doc["step2"]["LED_PIN"]["dato"];
        power = doc["step2"]["power"]["dato"];
        password = doc["step2"]["password"]["dato"];
        
        // Serialización del JSON completo
        doc["step1"]["apName"] = "miAP";
        doc["step1"]["apPassword"] = "";
        doc["step1"]["hostname"] = "ArduWS ";
        doc["step1"]["localIp"] = "192.168.1.10";
        doc["step1"]["gateway"] = "192.168.1.1";
        doc["step1"]["subnet"] = "255.255.255.0";
        doc["step1"]["dns1"] = "8.8.8.8";
        doc["step1"]["dns2"] = "8.8.4.4";
        doc["step2"]["LED_PIN"]["dato"] = 13;
        doc["step2"]["power"]["dato"] = true;
        doc["step2"]["password"]["dato"] = "12345678";
        
                
      </code>
    </pre>
    <button class="btn btn-primary" onclick="configuracionWireless();">Comenzar</button>
  </div>

  <form id="formWireless" class="container border rounded p-3 my-3" style="display: none;">
    <div id="step1">
      <h2>Configuración Wireless</h2>

      <div class="mb-3">
        <label for="apName" class="form-label">Nombre del punto de acceso</label>
        <input type="text" class="form-control" id="apName" name="apName" autocomplete="username">
      </div>
      <div class="mb-3">
        <label for="apPassword" class="form-label">Contraseña del AP</label>
        <input type="password" class="form-control" id="apPassword" name="apPassword" autocomplete="current-password">
      </div>
      <div class="mb-3">
        <label for="hostname" class="form-label">Hostname</label>
        <input type="text" class="form-control" id="hostname" name="hostname">
      </div>
      <div class="mb-3">
        <label for="localIp" class="form-label">IP Local</label>
        <input type="text" class="form-control" id="localIp" name="localIp">
      </div>
      <div class="mb-3">
        <label for="gateway" class="form-label">Gateway</label>
        <input type="text" class="form-control" id="gateway" name="gateway">
      </div>
      <div class="mb-3">
        <label for="subnet" class="form-label">Subnet</label>
        <input type="text" class="form-control" id="subnet" name="subnet">
      </div>
      <div class="mb-3">
        <label for="dns1" class="form-label">DNS 1</label>
        <input type="text" class="form-control" id="dns1" name="dns1">
      </div>
      <div class="mb-3">
        <label for="dns2" class="form-label">DNS 2</label>
        <input type="text" class="form-control" id="dns2" name="dns2">
      </div>
      <button type="button" onclick="principal();" class="btn btn-danger mb-3">Cancelar</button>
      <button type="button" onclick="formLimpiar('formWireless');" class="btn btn-secondary mb-3">Limpiar</button>
      <button type="button" onclick="principal();" class="btn btn-warning mb-3">Paso anterior</button>
      <button type="button" onclick="saveFormData('formWireless');showFormDataInJsonContainer();configuracionDatos();"
        class="btn btn-info mb-3">Siguiente</button>
      <button type="button" onclick="saveFormData('formWireless');showFormDataInJsonContainer();"
        class="btn btn-success mb-3">Aceptar</button>
    </div>
  </form>

  <form id="formDatos" class="container border rounded p-3 my-3" style="display: none;">
    <div id="step2">
      <h2>Creacion de datos</h2>
      <br>
      <p class="text-success">Pulsa el boton '+' y agrega campos de datos para crear tus objetos Json.</p>
      <p class="text-secondary">Escribe el <strong>nombre</strong> de tu variable, selecciona el <strong>tipo de
          dato</strong>, ingresa el <strong>valor del dato</strong>, elige un <strong>color</strong> y selecciona un
        <strong>icono</strong>.
      </p>
      <div id="contenedorDeCampos" class="container border rounded p-3 my-3">
        <div id="campoDatos" class="mb-3" style="display: none;">
          <label class="form-label"></label>
          <input type="text" class="form-control">
        </div>
      </div>
    </div>
    <button type="button" onclick="agregarCampoDatos();" class="btn btn-primary mb-3">+</button>
    <button type="button" onclick="principal();" class="btn btn-danger mb-3">Cancelar</button>
    <button type="button" onclick="formLimpiar('formDatos');" class="btn btn-warning mb-3">Limpiar</button>
    <button type="button" onclick="configuracionWireless();" class="btn btn-primary mb-3">Paso anterior</button>
    <button type="button" onclick="saveFormData('formDatos');showFormDataInJsonContainer();constructorCodigo();"
      class="btn btn-info mb-3">Siguiente</button>
    <button type="button" onclick="saveFormData('formDatos');showFormDataInJsonContainer();"
      class="btn btn-success mb-3">Aceptar</button>
    </div>
  </form>

  <form id="formArduino" class="container border rounded p-3 my-3" style="display: none;">
    <div id="step3">
      <h2>Codigo Arduino</h2>
      <div id="dynamicFields"></div>
      <button type="button" onclick="principal();" class="btn btn-danger mb-3">Cancelar</button>
      <button type="button" onclick="configuracionDatos()" class="btn btn-primary mb-3">Paso anterior</button>
      <button type="button" onclick="" class="btn btn-success mb-3">Generar C++</button>
    </div>
  </form>



  <script>

    // Inicializa un array vacío para almacenar los datos del formulario
    var formDataArray = [];
    var formDataObject = {};

    function agregarCampoDatos() {
      // Obtiene el contenedor de campos
      var contenedor = document.getElementById('contenedorDeCampos');

      // Crea un nuevo div con la clase 'mb-3' para cada campo de entrada
      var div = document.createElement('div');
      div.className = 'mb-3';

      // Crea un nuevo label y un nuevo input para cada campo de entrada
      var campos = ['nombre', 'tipo', 'valor', 'color', 'icono'];
      campos.forEach(function (campo) {
        var label = document.createElement('label');
        label.htmlFor = campo;
        label.className = 'form-label';
        label.textContent = campo.charAt(0).toUpperCase() + campo.slice(1);

        var input = document.createElement('input');
        input.type = 'text';
        input.className = 'form-control';
        input.id = campo;
        input.name = campo; // Añade un atributo 'name' al elemento de entrada
        input.placeholder = campo.charAt(0).toUpperCase() + campo.slice(1);

        // Añade el label y el input al div
        div.appendChild(label);
        div.appendChild(input);
      });

      // Añade el div al contenedor de campos
      contenedor.appendChild(div);
    }



    function formLimpiar(formId) {
      // Obtiene el formulario
      var form = document.getElementById(formId);

      // Comprueba si el formulario existe
      if (form) {
        // Recorre cada elemento del formulario
        for (var i = 0; i < form.elements.length; i++) {
          // Si el elemento es un campo de entrada, lo limpia
          if (form.elements[i].type == "text" || form.elements[i].type == "password") {
            form.elements[i].value = "";
          }
        }
      } else {
        console.log("No se encontró el formulario con el ID: " + formId);
      }
    }


    // Función para guardar los datos del formulario en el objeto
    function saveFormData(formId) {
      // Obtiene los elementos del formulario
      var form = document.getElementById(formId);
      var elements = form.elements;

      // Crea un objeto para almacenar los datos del formulario
      var formData = {};

      // Recorre cada elemento del formulario
      for (var i = 0; i < elements.length; i++) {
        // Si el elemento tiene un nombre y un valor, añádelo al objeto formData
        if (elements[i].name && elements[i].value) {
          formData[elements[i].name] = elements[i].value;
        }
      }

      // Añade el objeto formData al objeto formDataObject con el nombre del formulario como clave
      formDataObject[formId] = formData;

      // Muestra los datos del formulario en la consola
      console.log(formDataObject);
    }

    function showFormDataInJsonContainer() {
      // Convierte el objeto formDataObject en una cadena JSON con un formato bonito
      var prettyJson = JSON.stringify(formDataObject, null, 2);

      // Obtiene el elemento jsonContainer y establece su contenido de texto con la cadena JSON
      var jsonContainer = document.getElementById('jsonCode');
      jsonContainer.textContent = prettyJson;

      // Muestra el contenedor JSON
      document.getElementById('jsonContainer').style.display = 'block';
    }


    function principal() {
      document.getElementById('principal').style.display = 'block';
      document.getElementById('formDatos').style.display = 'none';
      document.getElementById('formArduino').style.display = 'none';
      document.getElementById('formWireless').style.display = 'none';
      document.getElementById('jsonContainer').style.display = 'none';

    }
    function configuracionWireless() {
      document.getElementById('principal').style.display = 'none';
      document.getElementById('formDatos').style.display = 'none';
      document.getElementById('formArduino').style.display = 'none';
      document.getElementById('formWireless').style.display = 'block';
      document.getElementById('jsonContainer').style.display = 'block';

    }
    function configuracionDatos() {
      document.getElementById('principal').style.display = 'none';
      document.getElementById('formDatos').style.display = 'block';
      document.getElementById('formArduino').style.display = 'none';
      document.getElementById('formWireless').style.display = 'none';
    }
    function constructorCodigo() {
      document.getElementById('principal').style.display = 'none';
      document.getElementById('formDatos').style.display = 'none';
      document.getElementById('formArduino').style.display = 'block';
      document.getElementById('formWireless').style.display = 'none';
    }
    function constructorGuiado() {
      document.getElementById('principal').style.display = 'none';
      document.getElementById('formDatos').style.display = 'none';
      document.getElementById('formArduino').style.display = 'none';
      document.getElementById('formWireless').style.display = 'none';
      document.getElementById('jsonContainer').style.display = 'none';
    }

    // Añade una función para copiar el JSON al portapapeles
    function portapapelesJson() {
      // Crea un elemento textarea temporal
      var tempElement = document.createElement('textarea');
      var jsonString = JSON.stringify(json, null, 2); // Aquí 'json' es tu objeto JSON
      tempElement.value = jsonString;

      // Añade el textarea al cuerpo del documento
      document.body.appendChild(tempElement);

      // Selecciona el texto del textarea
      tempElement.select();

      // Copia el texto al portapapeles
      document.execCommand('copy');

      // Elimina el textarea del cuerpo del documento
      document.body.removeChild(tempElement);

      // Informa al usuario que el JSON ha sido copiado
      alert('JSON copiado al portapapeles.');
    }

    var selectorPrincipal = document.getElementById('principal'); // Obtén el elemento con el ID 'arduinoCode'
    if (selectorPrincipal) {
      var arduinoCode = selectorPrincipal.querySelector('pre code'); // Obtiene el contenido de texto dentro de la etiqueta <code>
      // Realiza las operaciones necesarias con el código Arduino aquí
      if (arduinoCode) {
        hljs.highlightBlock(arduinoCode, { language: 'cpp', theme: 'vs' }); // Specify 'cpp' as the language
      }
    }
    // Añade un controlador de eventos de clic al enlace "Principal"
    document.querySelector('.navbar-brand').addEventListener('click', function (event) {
      event.preventDefault();
      principal();
    });

    document.querySelector('#constructor-manual').addEventListener('click', function (event) {
      event.preventDefault();
      configuracionWireless();
    });

    document.querySelector('#constructor-guiado').addEventListener('click', function (event) {
      event.preventDefault();
      constructorGuiado();
    });



  </script>

</body>

</html>
